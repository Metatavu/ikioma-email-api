/**
* Payment service API
* Payment processing API  Note: The API is currently under development. Some endpoints do not yet have all the features described here, and the responses of some do not match the description here. 
*
* The version of the OpenAPI document: 2.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package fi.metatavu.ikioma.email.payment.api.spec

import fi.metatavu.ikioma.email.payment.spec.model.Error
import fi.metatavu.ikioma.email.payment.spec.model.PaymentReportBySettlementIdRequest
import fi.metatavu.ikioma.email.payment.spec.model.PaymentReportRequest
import fi.metatavu.ikioma.email.payment.spec.model.PaymentReportRequestResponse

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class PaymentReportsApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "https://api.checkout.fi")
        }
    }

    /**
    * Request a payment report
    * Request a report of payments to be sent to the given callback url. Callback schema defined in PaymentReportCallbackJSON. 
    * @param paymentReportRequest Payment body payload 
    * @param checkoutAccount Merchant ID (optional)
    * @param checkoutAlgorithm HMAC algorithm (optional)
    * @param checkoutMethod HTTP method of the request (optional)
    * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
    * @param signature HMAC signature calculated over the request headers and payload (optional)
    * @return PaymentReportRequestResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun requestPaymentReport(paymentReportRequest: PaymentReportRequest, checkoutAccount: kotlin.Int?, checkoutAlgorithm: kotlin.String?, checkoutMethod: kotlin.String?, checkoutTimestamp: java.time.OffsetDateTime?, signature: kotlin.String?) : PaymentReportRequestResponse {
        val localVariableConfig = requestPaymentReportRequestConfig(paymentReportRequest = paymentReportRequest, checkoutAccount = checkoutAccount, checkoutAlgorithm = checkoutAlgorithm, checkoutMethod = checkoutMethod, checkoutTimestamp = checkoutTimestamp, signature = signature)

        val localVarResponse = request<PaymentReportRequestResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymentReportRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation requestPaymentReport
    *
    * @param paymentReportRequest Payment body payload 
    * @param checkoutAccount Merchant ID (optional)
    * @param checkoutAlgorithm HMAC algorithm (optional)
    * @param checkoutMethod HTTP method of the request (optional)
    * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
    * @param signature HMAC signature calculated over the request headers and payload (optional)
    * @return RequestConfig
    */
    fun requestPaymentReportRequestConfig(paymentReportRequest: PaymentReportRequest, checkoutAccount: kotlin.Int?, checkoutAlgorithm: kotlin.String?, checkoutMethod: kotlin.String?, checkoutTimestamp: java.time.OffsetDateTime?, signature: kotlin.String?) : RequestConfig {
        val localVariableBody: kotlin.Any? = paymentReportRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        checkoutAccount?.apply { localVariableHeaders["checkout-account"] = this.toString() }
        checkoutAlgorithm?.apply { localVariableHeaders["checkout-algorithm"] = this.toString() }
        checkoutMethod?.apply { localVariableHeaders["checkout-method"] = this.toString() }
        checkoutTimestamp?.apply { localVariableHeaders["checkout-timestamp"] = this.toString() }
        signature?.apply { localVariableHeaders["signature"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/payments/report",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * Request a report of payments contained in a given settlement
    * Request a report of payments contained in a given settlement to be sent to the given callback url. Callback schema defined in PaymentReportCallbackJSON. 
    * @param settlementId Settlement ID 
    * @param paymentReportBySettlementIdRequest Payment body payload 
    * @param checkoutAccount Merchant ID (optional)
    * @param checkoutAlgorithm HMAC algorithm (optional)
    * @param checkoutMethod HTTP method of the request (optional)
    * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
    * @param signature HMAC signature calculated over the request headers and payload (optional)
    * @return PaymentReportRequestResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun requestPaymentReportBySettlementId(settlementId: kotlin.String, paymentReportBySettlementIdRequest: PaymentReportBySettlementIdRequest, checkoutAccount: kotlin.Int?, checkoutAlgorithm: kotlin.String?, checkoutMethod: kotlin.String?, checkoutTimestamp: java.time.OffsetDateTime?, signature: kotlin.String?) : PaymentReportRequestResponse {
        val localVariableConfig = requestPaymentReportBySettlementIdRequestConfig(settlementId = settlementId, paymentReportBySettlementIdRequest = paymentReportBySettlementIdRequest, checkoutAccount = checkoutAccount, checkoutAlgorithm = checkoutAlgorithm, checkoutMethod = checkoutMethod, checkoutTimestamp = checkoutTimestamp, signature = signature)

        val localVarResponse = request<PaymentReportRequestResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymentReportRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation requestPaymentReportBySettlementId
    *
    * @param settlementId Settlement ID 
    * @param paymentReportBySettlementIdRequest Payment body payload 
    * @param checkoutAccount Merchant ID (optional)
    * @param checkoutAlgorithm HMAC algorithm (optional)
    * @param checkoutMethod HTTP method of the request (optional)
    * @param checkoutTimestamp Current timestamp in ISO 8601 format (optional)
    * @param signature HMAC signature calculated over the request headers and payload (optional)
    * @return RequestConfig
    */
    fun requestPaymentReportBySettlementIdRequestConfig(settlementId: kotlin.String, paymentReportBySettlementIdRequest: PaymentReportBySettlementIdRequest, checkoutAccount: kotlin.Int?, checkoutAlgorithm: kotlin.String?, checkoutMethod: kotlin.String?, checkoutTimestamp: java.time.OffsetDateTime?, signature: kotlin.String?) : RequestConfig {
        val localVariableBody: kotlin.Any? = paymentReportBySettlementIdRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        checkoutAccount?.apply { localVariableHeaders["checkout-account"] = this.toString() }
        checkoutAlgorithm?.apply { localVariableHeaders["checkout-algorithm"] = this.toString() }
        checkoutMethod?.apply { localVariableHeaders["checkout-method"] = this.toString() }
        checkoutTimestamp?.apply { localVariableHeaders["checkout-timestamp"] = this.toString() }
        signature?.apply { localVariableHeaders["signature"] = this.toString() }
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/settlements/{settlementId}/payments/report".replace("{"+"settlementId"+"}", "$settlementId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

}
