/**
* Payment service API
* Payment processing API  Note: The API is currently under development. Some endpoints do not yet have all the features described here, and the responses of some do not match the description here. 
*
* The version of the OpenAPI document: 2.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package fi.metatavu.ikioma.email.payment.spec.model


import com.squareup.moshi.Json

/**
 * The returned fields can be filtered out by specifying \"reportFields\" parameter
 * @param entryDate When the payment was paid or initialized
 * @param created Hour and minute of the payment creation
 * @param amount Payment amount in Euros
 * @param status Payment status
 * @param firstname First name
 * @param familyname Last name
 * @param description Payment description
 * @param reference Merchant's reference
 * @param paymentMethod Payment method
 * @param stamp Payment Stamp
 * @param address Delivery address
 * @param postcode Postal code
 * @param postoffice Post office
 * @param country Country of delivery
 * @param checkoutReference Checkout reference
 * @param archiveNumber Archive number
 * @param payerName Name from bank
 * @param settlementId Settlement (report) id
 * @param settlementDate When the payment is settled
 * @param originalTradeReference Merchant's reference of the original payment in case of refund
 * @param vatPercentage Payment VAT percentage
 * @param vatAmount Payment VAT amount in Euros
 * @param paymentMethodFee Payment method fee in Euros
 * @param paymentMethodCommission Payment method commission amount in Euros
 * @param shopInShopCommission Payment method commission amount in Euros
 * @param shopInShopCommissionVatPercentage Payment method commission VAT percentage
 * @param shopInShopCommissionVatAmount Payment method commission VAT amount in Euros
 */

data class PaymentReportCallbackJSON (
    /* When the payment was paid or initialized */
    @Json(name = "entryDate")
    val entryDate: kotlin.String? = null,
    /* Hour and minute of the payment creation */
    @Json(name = "created")
    val created: kotlin.String? = null,
    /* Payment amount in Euros */
    @Json(name = "amount")
    val amount: kotlin.Float? = null,
    /* Payment status */
    @Json(name = "status")
    val status: PaymentReportCallbackJSON.Status? = null,
    /* First name */
    @Json(name = "firstname")
    val firstname: kotlin.String? = null,
    /* Last name */
    @Json(name = "familyname")
    val familyname: kotlin.String? = null,
    /* Payment description */
    @Json(name = "description")
    val description: kotlin.String? = null,
    /* Merchant's reference */
    @Json(name = "reference")
    val reference: kotlin.String? = null,
    /* Payment method */
    @Json(name = "paymentMethod")
    val paymentMethod: kotlin.String? = null,
    /* Payment Stamp */
    @Json(name = "stamp")
    val stamp: kotlin.String? = null,
    /* Delivery address */
    @Json(name = "address")
    val address: kotlin.String? = null,
    /* Postal code */
    @Json(name = "postcode")
    val postcode: kotlin.String? = null,
    /* Post office */
    @Json(name = "postoffice")
    val postoffice: kotlin.String? = null,
    /* Country of delivery */
    @Json(name = "country")
    val country: kotlin.String? = null,
    /* Checkout reference */
    @Json(name = "checkoutReference")
    val checkoutReference: kotlin.String? = null,
    /* Archive number */
    @Json(name = "archiveNumber")
    val archiveNumber: kotlin.String? = null,
    /* Name from bank */
    @Json(name = "payerName")
    val payerName: kotlin.String? = null,
    /* Settlement (report) id */
    @Json(name = "settlementId")
    val settlementId: java.math.BigDecimal? = null,
    /* When the payment is settled */
    @Json(name = "settlementDate")
    val settlementDate: kotlin.String? = null,
    /* Merchant's reference of the original payment in case of refund */
    @Json(name = "originalTradeReference")
    val originalTradeReference: kotlin.String? = null,
    /* Payment VAT percentage */
    @Json(name = "vatPercentage")
    val vatPercentage: kotlin.Float? = null,
    /* Payment VAT amount in Euros */
    @Json(name = "vatAmount")
    val vatAmount: kotlin.Float? = null,
    /* Payment method fee in Euros */
    @Json(name = "paymentMethodFee")
    val paymentMethodFee: kotlin.Float? = null,
    /* Payment method commission amount in Euros */
    @Json(name = "paymentMethodCommission")
    val paymentMethodCommission: kotlin.Float? = null,
    /* Payment method commission amount in Euros */
    @Json(name = "shopInShopCommission")
    val shopInShopCommission: kotlin.Float? = null,
    /* Payment method commission VAT percentage */
    @Json(name = "shopInShopCommissionVatPercentage")
    val shopInShopCommissionVatPercentage: kotlin.Float? = null,
    /* Payment method commission VAT amount in Euros */
    @Json(name = "shopInShopCommissionVatAmount")
    val shopInShopCommissionVatAmount: kotlin.Float? = null
) {

    /**
     * Payment status
     * Values: new,paid,waitingForApproval,cancelled,timeout,halted,delayed,paidAndSettled
     */
    enum class Status(val value: kotlin.String) {
        @Json(name = "New") new("New"),
        @Json(name = "Paid") paid("Paid"),
        @Json(name = "waiting for approval") waitingForApproval("waiting for approval"),
        @Json(name = "Cancelled") cancelled("Cancelled"),
        @Json(name = "Timeout") timeout("Timeout"),
        @Json(name = "Halted") halted("Halted"),
        @Json(name = "Delayed") delayed("Delayed"),
        @Json(name = "Paid and settled") paidAndSettled("Paid and settled");
    }
}

